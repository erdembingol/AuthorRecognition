package com.authorRecognition.ui;

import com.authorRecognition.db.DatabaseOperation;
import com.authorRecognition.ui.swing.MessageBox;
import com.authorRecognition.ui.swing.TableGUI;
import com.authorRecognition.weka.ArticleProperty;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author erdem_000
 */
public class AnalysisArticles extends javax.swing.JFrame {

    private List<ArticleProperty> articleProperties;

    /**
     * Creates new form AnalysisArticles
     */
    public AnalysisArticles() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        classifyResultButon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Analysis Articles");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1333, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                .addContainerGap())
        );

        classifyResultButon.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        classifyResultButon.setForeground(new java.awt.Color(0, 102, 51));
        classifyResultButon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/authorRecognition/images/User-Group-icon.png"))); // NOI18N
        classifyResultButon.setText("Classify Articles");
        classifyResultButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifyResultButonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(classifyResultButon, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classifyResultButon, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        DatabaseOperation db = new DatabaseOperation();
        try {
            db.connect();

            //Makalele özelliklerini veritabanından oku
            articleProperties = db.getAllArticleProperties();
            if (articleProperties.size() > 0) {

                //Table title listesini hazırla
                List<String> list = articleProperties.get(0).getProperties();
                List<String> titleList = new ArrayList<>();
                titleList.add("Author");
                for (String s : list) {
                    //titleList.add(s.substring(0,2));
                    titleList.add(s);
                }

                //Table content listesini hazırla
                List<List<String>> contentList = new ArrayList<>();
                for (int i = 0; i < articleProperties.size(); i++) {
                    contentList.add(new ArrayList<String>());
                    contentList.get(i).add(articleProperties.get(i).getAuthor());
                    for (int j = 0; j < articleProperties.get(i).getProperties().size(); j++) {
                        contentList.get(i).add(articleProperties.get(i).getValue(j));
                    }
                }

                //Title ve content listelerini table'a kaydet
                TableGUI table = new TableGUI(jTable1);
                String[] title = new String[titleList.size()];
                for (int i = 0; i < titleList.size(); i++) {
                    title[i] = titleList.get(i);
                }

                String[][] content = new String[contentList.size()][contentList.get(0).size()];
                for (int i = 0; i < contentList.size(); i++) {
                    for (int j = 0; j < contentList.get(i).size(); j++) {
                        content[i][j] = contentList.get(i).get(j);
                    }
                }

                table.setContent(content, title, "");

                for (int i = 0; i < list.size(); i++) {
                    jTable1.getColumnModel().getColumn(i).setMinWidth(100);
                    jTable1.getColumnModel().getColumn(i).setMaxWidth(100);
                    jTable1.getColumnModel().getColumn(i).setPreferredWidth(100);
                }
            }
            db.disconnect();
        } catch (Exception ex) {
            MessageBox.warningMessage("", "Article Properties not found!!!");
        }

        JTableHeader header = jTable1.getTableHeader();
        ColumnHeaderToolTips tips = new ColumnHeaderToolTips();
        for (int c = 0; c < jTable1.getColumnCount(); c++) {
            TableColumn col = jTable1.getColumnModel().getColumn(c);
            String value = col.getHeaderValue().toString();
            String explain = getExplain(value);
            tips.setToolTip(col, explain);
        }
        header.addMouseMotionListener(tips);
    }//GEN-LAST:event_formWindowOpened

    private void classifyResultButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifyResultButonActionPerformed
        ClassifyResult cr = new ClassifyResult();
        cr.setVisible(true);
    }//GEN-LAST:event_classifyResultButonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalysisArticles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalysisArticles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalysisArticles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalysisArticles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalysisArticles().setVisible(true);
            }
        });
    }

    private static String getExplain(String value) {
        String explain = "";
        switch (value) {
            case "Author":
                explain = "Köşe Yazısının Yazarı";
                break;
            case "ExclamationSentences":
                explain = "Köşe yazısındaki ünlem cümlelerinin yazıdaki oranı";
                break;
            case "InverseSentences":
                explain = "Köşe yazısındaki devrik cümlelerinin yazıdaki oranı";
                break;
            case "NounSentences":
                explain = "Köşe yazısındaki isim cümlelerinin yazıdaki oranı";
                break;
            case "QuestionSentences":
                explain = "Köşe yazısındaki soru cümlelerinin yazıdaki oranı";
                break;
            case "NegatifSentences":
                explain = "Köşe yazısındaki olumsuz cümlelerinin yazıdaki oranı";
                break;
            case "PositiveSentences":
                explain = "Köşe yazısındaki olumlu cümlelerinin yazıdaki oranı";
                break;
            case "RegularSentences":
                explain = "Köşe yazısındaki kurallı cümlelerinin yazıdaki oranı";
                break;
            case "SimpleSentences":
                explain = "Köşe yazısındaki basit cümlelerinin yazıdaki oranı";
                break;
            case "UnifiedSentences":
                explain = "Köşe yazısındaki bileşik cümlelerinin yazıdaki oranı";
                break;
            case "VerbSentences":
                explain = "Köşe yazısındaki fiil cümlelerinin yazıdaki oranı";
                break;
            case "Connectives":
                explain = "Köşe yazısındaki bağlaçların yazıdaki oranı";
                break;
            case "Nums":
                explain = "Köşe yazısındaki sayıların yazıdaki oranı";
                break;
            case "Prepositions":
                explain = "Köşe yazısındaki edatların yazıdaki oranı";
                break;
            case "Pronouns":
                explain = "Köşe yazısındaki zamirlerin yazıdaki oranı";
                break;
            case "ProperNouns":
                explain = "Köşe yazısındaki özel isimlerin yazıdaki oranı";
                break;
            case "QuestionWords":
                explain = "Köşe yazısındaki soru kelimelerinin yazıdaki oranı";
                break;
            case "Abbreviations":
                explain = "Köşe yazısındaki kısaltmalarının yazıdaki oranı";
                break;
            case "Adjectives":
                explain = "Köşe yazısındaki sıfatların yazıdaki oranı";
                break;
            case "Amputations":
                explain = "Köşe yazısındaki yansıma kelimelerinin yazıdaki oranı";
                break;
            case "ErrorWords":
                explain = "Köşe yazısındaki hatalı kelimelerin yazıdaki oranı";
                break;
            case "Exclamations":
                explain = "Köşe yazısındaki ünlem kelimelelerinin yazıdaki oranı";
                break;
            case "Nouns":
                explain = "Köşe yazısındaki isimlerin yazıdaki oranı";
                break;
            case "Times":
                explain = "Köşe yazısındaki zaman kelimelerinin yazıdaki oranı";
                break;
            case "Verbs":
                explain = "Köşe yazısındaki fiillerin yazıdaki oranı";
                break;
            case "ColonSize":
                explain = "Köşe yazısındaki iki nokta(:) sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "CommaSize":
                explain = "Köşe yazısındaki virgül(,) sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "EllipsisPointSize":
                explain = "Köşe yazısındaki üç nokta(...) sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "HypenSize":
                explain = "Köşe yazısındaki tire(-) nokta sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "PointSize":
                explain = "Köşe yazısındaki nokta(.) sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "QuotationSize":
                explain = "Köşe yazısındaki tırnak(\") sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "SemicolonSize":
                explain = "Köşe yazısındaki noktalı virgül(;) sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "ExlamationSize":
                explain = "Köşe yazısındaki ünlem(!) sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "ParanthesisSize":
                explain = "Köşe yazısındaki parantez( ([ ) sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "QuestionMarkSize":
                explain = "Köşe yazısındaki soru işareti(?) sayısının yazıdaki noktalama işaretlerine oranı";
                break;
            case "CapitalLetterSize":
                explain = "Köşe yazısındaki büyük harflerin yazıdaki harflere oranı";
                break;
            case "NumberSize":
                explain = "Köşe yazısındaki numaraların yazıdaki kelimelere oranı";
                break;
            case "AverageSentencesLength":
                explain = "Köşe yazısındaki ortalama cümle uzunluğu";
                break;
            case "AverageWordCountPerSentences":
                explain = "Köşe yazısındaki cümle başına ortalama kelime sayısı";
                break;
            case "AverageWordLength":
                explain = "Köşe yazısındaki ortalama kelime uzunluğu";
                break;
            case "Dugasts":
                explain = "V : Köşe yazısındaki farklı kelime sayısı\nN : Köşe yazısındaki kelime sayısı\nV / N^0.5";
                break;
            case "Guiard":
                explain = "V : Köşe yazısındaki farklı kelime sayısı\nN : Köşe yazısındaki kelime sayısı\nlogV / logN";
                break;
            case "Brunet":
                explain = "V : Köşe yazısındaki farklı kelime sayısı\nN : Köşe yazısındaki kelime sayısı\nlogV / log(logN)";
                break;
            case "Herdan":
                explain = "V : Köşe yazısındaki farklı kelime sayısı\nN : Köşe yazısındaki kelime sayısı\n(logN / logV)^0.5 / logN^2";
                break;
            case "Janenkov":
                explain = "V : Köşe yazısındaki farklı kelime sayısı\nN : Köşe yazısındaki kelime sayısı\n(logN^2) / (logN / logV)";
                break;
            case "Maas":
                explain = "V : Köşe yazısındaki farklı kelime sayısı\nN : Köşe yazısındaki kelime sayısı\n1 / V^2*logN";
                break;
            case "Rubet":
                explain = "V : Köşe yazısındaki farklı kelime sayısı\nN : Köşe yazısındaki kelime sayısı\nN^V/0.172";
                break;
            case "TypeTokenRatio":
                explain = "Köşe yazısındaki farklı kelime sayısının toplama oranı";
                break;
            case "TwoTimesWords":
                explain = "Köşe yazısındaki 2 kere tekrarlayan kelime sayısının toplama oranı";
                break;
            case "ThreeTimesWords":
                explain = "Köşe yazısındaki 3 kere tekrarlayan kelime sayısının toplama oranı";
                break;
            case "FourTimesWords":
                explain = "Köşe yazısındaki 4 kere tekrarlayan kelime sayısının toplama oranı";
                break;
            case "FiveTimesWords":
                explain = "Köşe yazısındaki 5 kere tekrarlayan kelime sayısının toplama oranı";
                break;
            case "SixTimesWords":
                explain = "Köşe yazısındaki 6 kere tekrarlayan kelime sayısının toplama oranı";
                break;
        }
        
        return explain;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton classifyResultButon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

class ColumnHeaderToolTips extends MouseMotionAdapter {

    TableColumn curCol;
    Map tips = new HashMap();

    public void setToolTip(TableColumn col, String tooltip) {
        if (tooltip == null) {
            tips.remove(col);
        } else {
            tips.put(col, tooltip);
        }
    }

    public void mouseMoved(MouseEvent evt) {
        JTableHeader header = (JTableHeader) evt.getSource();
        JTable table = header.getTable();
        TableColumnModel colModel = table.getColumnModel();
        int vColIndex = colModel.getColumnIndexAtX(evt.getX());
        TableColumn col = null;
        if (vColIndex >= 0) {
            col = colModel.getColumn(vColIndex);
        }
        if (col != curCol) {
            header.setToolTipText((String) tips.get(col));
            curCol = col;
        }
    }
}
