/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.authorRecognition.ui;

import com.authorRecognition.db.DatabaseOperation;
import com.authorRecognition.db.FileOperation;
import com.authorRecognition.ui.swing.MessageBox;
import com.authorRecognition.ui.swing.TableGUI;
import com.authorRecognition.zemberek.Article;
import com.authorRecognition.zemberek.ArticleOperation;
import com.authorRecognition.zemberek.MarkType;
import com.authorRecognition.zemberek.SentenceType;
import com.authorRecognition.zemberek.WordType;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author erdem_000
 */
public class AttributeSuccesRate extends javax.swing.JFrame {
    
    private TableGUI tableGUI = null;
    private Article article = null;

    /**
     * Creates new form AttributeSuccesRate
     */
    public AttributeSuccesRate() {
        initComponents();
        articleText.setWrapStyleWord(true);
        articleText.setLineWrap(true);
        
//        table.getColumnModel().getColumn(0).setMinWidth(150);
//        table.getColumnModel().getColumn(0).setMaxWidth(150);
//        table.getColumnModel().getColumn(0).setPreferredWidth(150);
//        table.getColumnModel().getColumn(1).setMaxWidth(100);
//        table.getColumnModel().getColumn(1).setMaxWidth(100);
//        table.getColumnModel().getColumn(1).setPreferredWidth(100);
//        table.getColumnModel().getColumn(2).setMinWidth(100);
//        table.getColumnModel().getColumn(2).setMaxWidth(100);
//        table.getColumnModel().getColumn(2).setPreferredWidth(100);
//        table.getColumnModel().getColumn(3).setMinWidth(120);
//        table.getColumnModel().getColumn(3).setMaxWidth(120);
//        table.getColumnModel().getColumn(3).setPreferredWidth(120);
        
        tableGUI = new TableGUI(this.table);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ClassifyResultTextArea = new javax.swing.JTextArea();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        articleText = new javax.swing.JTextArea();
        filePathTextBox = new javax.swing.JTextField();
        selectArticle = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        calculate = new javax.swing.JButton();

        ClassifyResultTextArea.setEditable(false);
        ClassifyResultTextArea.setColumns(20);
        ClassifyResultTextArea.setRows(5);
        jScrollPane1.setViewportView(ClassifyResultTextArea);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        articleText.setEditable(false);
        articleText.setColumns(20);
        articleText.setRows(5);
        articleText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(articleText);

        filePathTextBox.setEditable(false);
        filePathTextBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        filePathTextBox.setText("  Select...");
        filePathTextBox.setEnabled(false);

        selectArticle.setText("...");
        selectArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectArticleActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "Real Value", "Prediction Value", "Success Rate"
            }
        ));
        jScrollPane3.setViewportView(table);

        calculate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        calculate.setForeground(new java.awt.Color(0, 153, 255));
        calculate.setIcon(new javax.swing.ImageIcon("C:\\Users\\erdem_000\\Google Drive\\Buton Resimler\\start\\run-icon.png")); // NOI18N
        calculate.setText("Calculate");
        calculate.setEnabled(false);
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(filePathTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectArticle, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 748, Short.MAX_VALUE)
                                .addComponent(calculate))
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePathTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectArticle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectArticleActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.showOpenDialog(null);
        File file = fileChooser.getSelectedFile();
        this.filePathTextBox.setText(file.getPath().replace("\\", "\\\\"));

        if(this.filePathTextBox.getText().equals("Select...")){
            article = new Article(null, this.selectArticle.getText());
        }else{
            try {
                article = FileOperation.readArticles(this.filePathTextBox.getText()).get(0);
                this.articleText.setText(article.getContent());
            } catch (IOException ex) {
                MessageBox.warningMessage("", "Dosya Bulunamadı!!!");
                Logger.getLogger(FindArticleAuthor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        this.calculate.setEnabled(true);
    }//GEN-LAST:event_selectArticleActionPerformed

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        ArticleOperation ao = new ArticleOperation(article);
        
        List<String> properties = ao.getArticleProperties();
        properties.add("AVERAGE");
        
        List<String> values = new ArrayList<>();
            values.add(String.valueOf(ao.getSentenceCount(SentenceType.EXCLAMATION)));
            values.add(String.valueOf(ao.getSentenceCount(SentenceType.INVERSE)));
            values.add(String.valueOf(ao.getSentenceCount(SentenceType.NEGATIF)));        
            values.add(String.valueOf(ao.getWordCount(WordType.CONNECTIVE)));
            values.add(String.valueOf(ao.getWordCount(WordType.NUMBER)));
            values.add(String.valueOf(ao.getWordCount(WordType.PRONOUN)));
            values.add(String.valueOf(ao.getWordCount(WordType.QUESTION_WORD)));
            values.add(String.valueOf(ao.getWordCount(WordType.ABBREVIATION)));
            values.add(String.valueOf(ao.getWordCount(WordType.TIME)));        
            values.add(String.valueOf(ao.getMarkCount(MarkType.COLON)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.COMMA)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.ELLIPSIS_POINT)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.HYPEN)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.POINT)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.QUOTATION)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.SEMICOLON)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.EXCLAMATION_MARK)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.PARANTHESIS)));
            values.add(String.valueOf(ao.getMarkCount(MarkType.QUESTION_MARK)));                  
            values.add(String.valueOf(ao.getCapitalLetterCount()));       
            values.add(String.format("%.2f", ao.getAverageSentencesLength()));
            values.add(String.format("%.2f", ao.getAverageWordCountPerSentences()));
            values.add(String.format("%.2f", ao.getAverageWordLength()));        
            values.add(String.format("%.2f", ao.getDugasts()));
            values.add(String.format("%.2f", ao.getGuiard()));
            values.add(String.format("%.2f", ao.getMaas()));
            values.add(String.format("%.2f", ao.getRubet()));
            values.add(String.format("%.2f", ao.getSichel()));        
            values.add(String.format("%.2f", ao.getTypeTokenRatio()));
        
        List<String> realValue = new ArrayList<>();
            realValue.add("2");
            realValue.add("4");
            realValue.add("5");
            realValue.add("18");
            realValue.add("25");
            realValue.add("16");
            realValue.add("1");
            realValue.add("12");
            realValue.add("9");
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.COLON)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.COMMA)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.ELLIPSIS_POINT)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.HYPEN)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.POINT)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.QUOTATION)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.SEMICOLON)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.EXCLAMATION_MARK)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.PARANTHESIS)));
            realValue.add(String.valueOf(ao.getMarkCount(MarkType.QUESTION_MARK)));            
            realValue.add(String.valueOf(ao.getCapitalLetterCount()));
            realValue.add(String.format("%.2f", ao.getAverageSentencesLength()));
            realValue.add(String.format("%.2f", ao.getAverageWordCountPerSentences()));
            realValue.add(String.format("%.2f", ao.getAverageWordLength()));
            realValue.add(String.format("%.2f", ao.getDugasts()));
            realValue.add(String.format("%.2f", ao.getGuiard()));
            realValue.add(String.format("%.2f", ao.getMaas()));
            realValue.add(String.format("%.2f", ao.getRubet()));
            realValue.add(String.format("%.2f", ao.getSichel()));
            realValue.add(String.format("%.2f", ao.getTypeTokenRatio()));
        
        double[] valueD = new double[values.size()];
            valueD[0] = ao.getSentenceCount(SentenceType.EXCLAMATION);
            valueD[1] = ao.getSentenceCount(SentenceType.INVERSE);
            valueD[2] = ao.getSentenceCount(SentenceType.NEGATIF);
            valueD[3] = ao.getWordCount(WordType.CONNECTIVE);
            valueD[4] = ao.getWordCount(WordType.NUMBER);
            valueD[5] = ao.getWordCount(WordType.PRONOUN);
            valueD[6] = ao.getWordCount(WordType.QUESTION_WORD);
            valueD[7] = ao.getWordCount(WordType.ABBREVIATION);
            valueD[8] = ao.getWordCount(WordType.TIME);       
            valueD[9] = ao.getMarkCount(MarkType.COLON);
            valueD[10] = ao.getMarkCount(MarkType.COMMA);
            valueD[11] = ao.getMarkCount(MarkType.ELLIPSIS_POINT);
            valueD[12] = ao.getMarkCount(MarkType.HYPEN);
            valueD[13] = ao.getMarkCount(MarkType.POINT);
            valueD[14] = ao.getMarkCount(MarkType.QUOTATION);
            valueD[15] = ao.getMarkCount(MarkType.SEMICOLON);
            valueD[16] = ao.getMarkCount(MarkType.EXCLAMATION_MARK);
            valueD[17] = ao.getMarkCount(MarkType.PARANTHESIS);
            valueD[18] = ao.getMarkCount(MarkType.QUESTION_MARK);     
            valueD[19] = ao.getCapitalLetterCount();       
            valueD[20] = ao.getAverageSentencesLength();
            valueD[21] = ao.getAverageWordCountPerSentences();
            valueD[22] = ao.getAverageWordLength();
            valueD[23] = ao.getDugasts();
            valueD[24] = ao.getGuiard();
            valueD[25] = ao.getMaas();
            valueD[26] = ao.getRubet();
            valueD[27] = ao.getSichel();        
            valueD[28] = ao.getTypeTokenRatio();       
                
        double[] realValueD = new double[realValue.size()];
            realValueD[0] = 2;
            realValueD[1] = 4;
            realValueD[2] = 5;       
            realValueD[3] = 18;       
            realValueD[4] = 25;       
            realValueD[5] = 16;
            realValueD[6] = 1;       
            realValueD[7] = 12;       
            realValueD[8] = 9;       
            realValueD[9] = ao.getMarkCount(MarkType.COLON);
            realValueD[10] = ao.getMarkCount(MarkType.COMMA);
            realValueD[11] = ao.getMarkCount(MarkType.ELLIPSIS_POINT);
            realValueD[12] = ao.getMarkCount(MarkType.HYPEN);
            realValueD[13] = ao.getMarkCount(MarkType.POINT);
            realValueD[14] = ao.getMarkCount(MarkType.QUOTATION);
            realValueD[15] = ao.getMarkCount(MarkType.SEMICOLON);
            realValueD[16] = ao.getMarkCount(MarkType.EXCLAMATION_MARK);
            realValueD[17] = ao.getMarkCount(MarkType.PARANTHESIS);
            realValueD[18] = ao.getMarkCount(MarkType.QUESTION_MARK);          
            realValueD[19] = ao.getCapitalLetterCount();       
            realValueD[20] = ao.getAverageSentencesLength();
            realValueD[21] = ao.getAverageWordCountPerSentences();
            realValueD[22] = ao.getAverageWordLength();
            realValueD[23] = ao.getDugasts();
            realValueD[24] = ao.getGuiard();
            realValueD[25] = ao.getMaas();
            realValueD[26] = ao.getRubet();
            realValueD[27] = ao.getSichel();        
            realValueD[28] = ao.getTypeTokenRatio();     
        
        List<String> successRate = new ArrayList<>();
        double average = 0.0;
        for (int i = 0; i < values.size(); i++) {
            double sr = 0.0;
            System.out.println(values.get(i));
            if(valueD[i] == 0 && realValueD[i] == 0)
                sr = 100.0;
            else if(valueD[i] == 0 || realValueD[i] == 0)
                sr = 0.0;
            else if(valueD[i] < realValueD[i])
                sr = 100 - (((realValueD[i] - valueD[i])) * 100) / realValueD[i];
            else
                sr = 100 - (((valueD[i] - realValueD[i])) * 100) / valueD[i];
            successRate.add("%" + String.format("%.2f", sr));
            average += sr;
        }
        average /= values.size();
        successRate.add("%" + String.format("%.2f", average));
                
        //Table başlıklarını hazırla
        List<String> baslikList = new ArrayList<>();
        baslikList.add("Properties");
        baslikList.add("Real Value");
        baslikList.add("Prediction Value");
        baslikList.add("Success Rate");
        String[] baslik = listToStringArray(baslikList);
        String[][] veri = new String[properties.size()][4];
        String[] Pveri = listToStringArray(properties);
        realValue.add("");
        String[] Rveri = listToStringArray(realValue);
        values.add("");
        String[] Vveri = listToStringArray(values);   
        String[] Sveri = listToStringArray(successRate);
        
        for (int i = 0; i < properties.size(); i++) {
            veri[i][0] = Pveri[i];
            veri[i][1] = Rveri[i];
            veri[i][2] = Vveri[i];
            veri[i][3] = Sveri[i];
        }
        
        //Table'a verileri ekle
        tableGUI.setContent(veri, baslik, null);
    }//GEN-LAST:event_calculateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AttributeSuccesRate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AttributeSuccesRate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AttributeSuccesRate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AttributeSuccesRate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AttributeSuccesRate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ClassifyResultTextArea;
    private javax.swing.JTextArea articleText;
    private javax.swing.JButton calculate;
    private javax.swing.JTextField filePathTextBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton selectArticle;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private String[] listToStringArray(List<String> list){
        String[] baslik = new String[list.size()];
        for(int i=0; i< list.size(); i++){
            baslik[i] = list.get(i);
        }

        return baslik;
    }
}
