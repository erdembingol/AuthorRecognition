package com.authorRecognition.ui;

import com.authorRecognition.db.DatabaseOperation;
import com.authorRecognition.db.FileOperation;
import com.authorRecognition.ui.swing.ComboBoxGUI;
import com.authorRecognition.ui.swing.MessageBox;
import com.authorRecognition.ui.swing.TableGUI;
import com.authorRecognition.ui.swing.TextBoxGUI;
import com.authorRecognition.weka.ArticleProperty;
import com.authorRecognition.zemberek.Article;
import com.authorRecognition.zemberek.ArticleOperation;
import com.authorRecognition.zemberek.ArticleType;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.SwingUtilities;

public class Home extends javax.swing.JFrame {
    
    List<Article> articles = new ArrayList<>();
    List<Article> tableList = new ArrayList<>();
    private TableGUI tableGUI = null;
    private ComboBoxGUI articleAuthorListGUI = null;
    private ComboBoxGUI articleTypeListGUI = null;
    private ComboBoxGUI articleAuthorAddGUI = null;
    private ComboBoxGUI articleTypeAddGUI = null;
    private TextBoxGUI articleAuthorAddTextGUI = null;
    
    public Home() {
        initComponents();
        
        table.getColumnModel().getColumn(0).setMinWidth(150);
        table.getColumnModel().getColumn(0).setMaxWidth(150);
        table.getColumnModel().getColumn(0).setPreferredWidth(150);
        table.getColumnModel().getColumn(1).setMaxWidth(700);
        table.getColumnModel().getColumn(1).setMaxWidth(700);
        table.getColumnModel().getColumn(1).setPreferredWidth(700);
        table.getColumnModel().getColumn(2).setMinWidth(100);
        table.getColumnModel().getColumn(2).setMaxWidth(100);
        table.getColumnModel().getColumn(2).setPreferredWidth(100);
            
        table.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1 && (e.getButton() == 2 || e.getButton() == 3)) {
                    JTable target = (JTable)e.getSource();
                    int row = target.getSelectedRow();
                    
                    Article a = tableList.get(row);
                    ArticleDetail ad = new ArticleDetail(a);
                    ad.setVisible(true);
                }
            }
        });
      
        tableGUI = new TableGUI(this.table);
        articleAuthorListGUI = new ComboBoxGUI(this.articleAuthorListComboBox);
        articleTypeListGUI = new ComboBoxGUI(this.articleTypeListComboBox);
        articleAuthorAddGUI = new ComboBoxGUI(this.articleAuthorAddComboBox);
        articleTypeAddGUI = new ComboBoxGUI(this.articleTypeAddComboBox);
        articleAuthorAddTextGUI = new TextBoxGUI(this.articleAuthorAddTextField);
        
        this.addArticle.setEnabled(false);
        this.removeArticle.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        articleAuthorListComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        articleTypeListComboBox = new javax.swing.JComboBox();
        listAllArticles = new javax.swing.JButton();
        listArticles = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        filePathTextBox = new javax.swing.JTextField();
        selectArticle = new javax.swing.JButton();
        addArticle = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        articleTypeAddComboBox = new javax.swing.JComboBox();
        articleAuthorAddComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        articleAuthorAddTextField = new javax.swing.JTextField();
        removeArticle = new javax.swing.JButton();
        ClearDatabase = new javax.swing.JButton();
        clearArticleProperties = new javax.swing.JButton();
        AnalysisArticles = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        findAuthor = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        attributeSuccessRate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Author Recognition");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("------------------ List Articles ------------------");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Article Author");

        articleAuthorListComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select..." }));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Article Type");

        articleTypeListComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select..." }));

        listAllArticles.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        listAllArticles.setForeground(new java.awt.Color(0, 102, 255));
        listAllArticles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/authorRecognition/images/Actions-view-calendar-list-icon.png"))); // NOI18N
        listAllArticles.setText("List All Articles");
        listAllArticles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllArticlesActionPerformed(evt);
            }
        });

        listArticles.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        listArticles.setForeground(new java.awt.Color(0, 102, 255));
        listArticles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/authorRecognition/images/to-do-list-cheked-all-icon.png"))); // NOI18N
        listArticles.setText("List Articles");
        listArticles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listArticlesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(articleTypeListComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(articleAuthorListComboBox, 0, 167, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listArticles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listAllArticles)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(articleAuthorListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(articleTypeListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listAllArticles, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listArticles, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("------------ Add or Remove Articles -----------");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("File or Directory");

        filePathTextBox.setEditable(false);
        filePathTextBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        filePathTextBox.setText("  Select...");

        selectArticle.setText("...");
        selectArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectArticleActionPerformed(evt);
            }
        });

        addArticle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addArticle.setForeground(new java.awt.Color(0, 102, 255));
        addArticle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/authorRecognition/images/add-icon.png"))); // NOI18N
        addArticle.setText("Add Article");
        addArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addArticleActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Type");

        articleTypeAddComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select..." }));

        articleAuthorAddComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select..." }));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Author");

        articleAuthorAddTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));

        removeArticle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        removeArticle.setForeground(new java.awt.Color(0, 102, 255));
        removeArticle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/authorRecognition/images/Close-icon.png"))); // NOI18N
        removeArticle.setText("Remove Article");
        removeArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeArticleActionPerformed(evt);
            }
        });

        ClearDatabase.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ClearDatabase.setForeground(new java.awt.Color(0, 102, 255));
        ClearDatabase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/authorRecognition/images/Refresh-icon.png"))); // NOI18N
        ClearDatabase.setText("Clear DB");
        ClearDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearDatabaseActionPerformed(evt);
            }
        });

        clearArticleProperties.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        clearArticleProperties.setForeground(new java.awt.Color(0, 102, 255));
        clearArticleProperties.setIcon(new javax.swing.ImageIcon("C:\\Users\\erdem_000\\Google Drive\\Buton Resimler\\delete\\yellow-cross-icon.png")); // NOI18N
        clearArticleProperties.setText("Clear Article Properties");
        clearArticleProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearArticlePropertiesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filePathTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(selectArticle, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(articleTypeAddComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(articleAuthorAddComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(articleAuthorAddTextField))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(ClearDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeArticle, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addArticle)))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearArticleProperties))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(articleAuthorAddComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(articleAuthorAddTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(articleTypeAddComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(filePathTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectArticle, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ClearDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addArticle, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(removeArticle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearArticleProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AnalysisArticles.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        AnalysisArticles.setForeground(new java.awt.Color(0, 51, 0));
        AnalysisArticles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/authorRecognition/images/1413254409_analysis.png"))); // NOI18N
        AnalysisArticles.setText("Analysis Articles");
        AnalysisArticles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalysisArticlesActionPerformed(evt);
            }
        });

        table.setBackground(new java.awt.Color(255, 255, 204));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Author", "Content", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setGridColor(java.awt.SystemColor.activeCaption);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(table);

        findAuthor.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        findAuthor.setForeground(new java.awt.Color(0, 51, 102));
        findAuthor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/authorRecognition/images/find (1).png"))); // NOI18N
        findAuthor.setText("Find Author");
        findAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAuthorActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));

        attributeSuccessRate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        attributeSuccessRate.setForeground(new java.awt.Color(0, 102, 102));
        attributeSuccessRate.setIcon(new javax.swing.ImageIcon("C:\\Users\\erdem_000\\Google Drive\\Buton Resimler\\analiz.png")); // NOI18N
        attributeSuccessRate.setText("Attribute Success Rate");
        attributeSuccessRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeSuccessRateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 913, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(findAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(AnalysisArticles, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jSeparator1)
                        .addComponent(jSeparator2)
                        .addComponent(jSeparator3))
                    .addComponent(attributeSuccessRate))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AnalysisArticles, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(findAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attributeSuccessRate, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listArticlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listArticlesActionPerformed
        DatabaseOperation db = new DatabaseOperation();
        try {
            //Tüm makaleleri veritebanından oku
            db.connect();
            articles = db.getAllArticles();
            tableList.clear();

            //Table verilerini hazırla
            if(articles != null){
                for(int i=0; i<articles.size(); i++){
                    if(check(articles.get(i))){
                        tableList.add(articles.get(i));
                    } 
                }
            }
        
            //Table başlıklarını hazırla
            List<String> baslikList = new ArrayList<>();
            baslikList.add("Author");
            baslikList.add("Content");
            baslikList.add("Type");
            String[] baslik = listToStringArray(baslikList);
            String[][] veri = objectListToStringStringArray(tableList);

            //Table'a verileri ekle
            tableGUI.setContent(veri, baslik);
            db.disconnect();
        } catch (Exception ex) {
            MessageBox.informationMessage("", "Articles not found");
        }       
    }//GEN-LAST:event_listArticlesActionPerformed

    private void listAllArticlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAllArticlesActionPerformed
        DatabaseOperation db = new DatabaseOperation();
        try {
            //Tüm makaleleri veritebanından oku
            db.connect();
            articles = db.getAllArticles();
            tableList.clear();

            //Table verilerini hazırla
            if(articles != null){
                for(Article a : articles){
                    tableList.add(a);
                }
            }
            
            System.out.println("tablelist " + tableList.size());
        
            //Table başlıklarını hazırla
            List<String> baslikList = new ArrayList<>();
            baslikList.add("Author");
            baslikList.add("Content");
            baslikList.add("Type");
            String[] baslik = listToStringArray(baslikList);
            String[][] veri = objectListToStringStringArray(tableList);
        
            //Table'a verileri ekle
            tableGUI.setContent(veri, baslik);
            db.disconnect();
        } catch (Exception ex) {
            MessageBox.informationMessage("", "Articles not found");
        }           
    }//GEN-LAST:event_listAllArticlesActionPerformed

    private void selectArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectArticleActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.showOpenDialog(null);
        File file = fileChooser.getSelectedFile();
        this.filePathTextBox.setText(file.getPath().replace("\\", "\\\\"));
        
        this.addArticle.setEnabled(true);
    }//GEN-LAST:event_selectArticleActionPerformed

    private void addArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addArticleActionPerformed
        try {
            //Makale tipini oku
            String type = this.articleTypeAddGUI.getSelectedRow();
            if(type.equals("Select...")){
                type = "GENEL";
            }
            
            //Makaleleri dosyadan oku
            articles = FileOperation.readArticles(this.filePathTextBox.getText());
            String author = "";
            if(!this.articleAuthorAddGUI.getSelectedRow().equals("Select...")){
                author = this.articleAuthorAddGUI.getSelectedRow();
            }else{
                author = this.articleAuthorAddTextGUI.getText();
            }
            
            //Makaleleri veritabanına kaydet
            FileOperation.writeToDatabase(articles, ArticleType.valueOf(type), author);  
            this.filePathTextBox.setText("");
            this.articleAuthorAddTextField.setText("");
            MessageBox.informationMessage("", "Articles saved to DB");
        } catch (IOException ex) {
            MessageBox.warningMessage("", "File not found!!!");
        } catch (Exception ex) {
            MessageBox.errorMessage("", "Articles not saved to DB!!!");
        }            
    }//GEN-LAST:event_addArticleActionPerformed

    private void removeArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeArticleActionPerformed
        int index = tableGUI.getSelectedIndex();
        //Makale silmek için seçilmişmi kontrol et
        if(index < 0){
            MessageBox.errorMessage("", "Choose an article!!!");
        }else{
            int result = MessageBox.getConfirm("", "Are you sure to remove articles from DB?\n At the same time, article property also be deleted...");
            if(result != 0){
                return;
            }
            
            DatabaseOperation db = new DatabaseOperation();
            try {
                //Makaleyi veritabanından sil
                db.connect();
                db.articleDelete(tableList.get(index).getId());
                
                //Aynı id'li makale özelliğini veritabanından sil
                if(db.isExist("ArticleProperty")){
                    db.articlePropertyDelete(tableList.get(index).getId());/***********/
                }

                //Makaleyi table'dan kaldır
                tableGUI.deleteRow(index);
                this.tableList.remove(index);
                db.disconnect();
            } catch (Exception ex) {
                MessageBox.warningMessage("", "Articles not removed from DB or not found article for delete");
            }       
        }
    }//GEN-LAST:event_removeArticleActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        DatabaseOperation db = new DatabaseOperation();
        try {
            db.connect();
            articles = db.getAllArticles();
            db.disconnect();
        } catch (SQLException ex) {
            MessageBox.errorMessage("", "Articles not found");
        } catch (Exception ex) {
            MessageBox.errorMessage("", "DB connection failed");
        }              
        
        //Makale tiplerini ve yazar isimlerini hazırla
        Set<String> authorSet = new HashSet<>();
        Set<String> articleTypeSet = ArticleType.GENEL.getTypes();
        if(articles != null){
            for(Article article : articles){
                authorSet.add(article.getAuthor());
            }
        }              
        
        //Tüm combobox'ları doldur
        this.articleAuthorAddGUI.setContent(authorSet);
        this.articleAuthorListGUI.setContent(authorSet);
        this.articleTypeAddGUI.setContent(articleTypeSet);
        this.articleTypeListGUI.setContent(articleTypeSet);      
    }//GEN-LAST:event_formWindowOpened

    private void ClearDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearDatabaseActionPerformed
        DatabaseOperation db = new DatabaseOperation();
        try {
            db.connect();
            db.clearAllTables(); 
            tableList.clear();
            tableGUI.clear();
            db.disconnect();
        } catch (SQLException ex) {
            MessageBox.errorMessage("", "DB is not clear");
        } catch (Exception ex) {
            MessageBox.errorMessage("", "Article table not fonud");
        } 
    }//GEN-LAST:event_ClearDatabaseActionPerformed

    private void AnalysisArticlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalysisArticlesActionPerformed
        DatabaseOperation db = new DatabaseOperation();
        List<Article> articlesT;
        try {
            db.connect();
                      
            int articleSize = db.tableSize("Article");
            System.out.println(articleSize);
            int articlePropertySize = db.tableSize("ArticleProperty"); 
            System.out.println(articlePropertySize);
            int diff = articleSize - articlePropertySize;
            if(diff > 0){
                articlesT = db.getAllArticles();               
                for (int i = articlePropertySize; i < articleSize; i++) {
                    ArticleOperation ao = new ArticleOperation(articlesT.get(i));
                    List<String> properties = ao.getArticleProperties();  
                    List<String> values = ao.getArticleValues();
                    ArticleProperty ap = new ArticleProperty(articlesT.get(i).getAuthor(), properties, values);
                    if(!db.isExist("ArticleProperty")){
                        db.createTable(properties, "ArticleProperty");
                    }
                    db.articlePropertySave(ap);
                }
            }
            
            db.disconnect();
        } catch (Exception ex) {
            MessageBox.warningMessage("", "Articles Properties not calculated");
            Logger.getLogger(ArticlePropertyCalculate.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        AnalysisArticles aa = new AnalysisArticles();
        aa.setVisible(true);
    }//GEN-LAST:event_AnalysisArticlesActionPerformed

    private void findAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAuthorActionPerformed
        DatabaseOperation db = new DatabaseOperation();
        List<Article> articlesT;
        try {
            db.connect();
                      
            int articleSize = db.tableSize("Article");
            System.out.println(articleSize);
            int articlePropertySize = db.tableSize("ArticleProperty"); 
            System.out.println(articlePropertySize);
            int diff = articleSize - articlePropertySize;
            if(diff > 0){
                int decision = MessageBox.getConfirm(null, "Henüz köşe yazıları analizi yapılmadı. \nKöşe yazılarını analiz edip devam etmek istiyormusunuz?");
                if(decision == 1){
                    return;
                }
                
                articlesT = db.getAllArticles();               
                for (int i = articlePropertySize; i < articleSize; i++) {
                    ArticleOperation ao = new ArticleOperation(articlesT.get(i));
                    List<String> properties = ao.getArticleProperties();  
                    List<String> values = ao.getArticleValues();
                    ArticleProperty ap = new ArticleProperty(articlesT.get(i).getAuthor(), properties, values);
                    if(!db.isExist("ArticleProperty")){
                        db.createTable(properties, "ArticleProperty");
                    }
                    db.articlePropertySave(ap);
                }
            }
            
            db.disconnect();
        } catch (Exception ex) {
            MessageBox.warningMessage("", "Articles Properties not calculated");
            Logger.getLogger(ArticlePropertyCalculate.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        FindArticleAuthor faa = new FindArticleAuthor();
        faa.setVisible(true);
    }//GEN-LAST:event_findAuthorActionPerformed

    private void tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMousePressed
        this.removeArticle.setEnabled(true);
    }//GEN-LAST:event_tableMousePressed

    private void clearArticlePropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearArticlePropertiesActionPerformed
        DatabaseOperation db = new DatabaseOperation();
        try {
            db.connect();
            db.clearTable("articleproperty");
            db.disconnect();
        } catch (SQLException ex) {
            MessageBox.errorMessage("", "DB is not clear");
        } catch (Exception ex) {
            MessageBox.errorMessage("", "Article table not fonud");
        } 
    }//GEN-LAST:event_clearArticlePropertiesActionPerformed

    private void attributeSuccessRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeSuccessRateActionPerformed
        AttributeSuccesRate asr = new AttributeSuccesRate();
        asr.setVisible(true);
    }//GEN-LAST:event_attributeSuccessRateActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnalysisArticles;
    private javax.swing.JButton ClearDatabase;
    private javax.swing.JButton addArticle;
    private javax.swing.JComboBox articleAuthorAddComboBox;
    private javax.swing.JTextField articleAuthorAddTextField;
    private javax.swing.JComboBox articleAuthorListComboBox;
    private javax.swing.JComboBox articleTypeAddComboBox;
    private javax.swing.JComboBox articleTypeListComboBox;
    private javax.swing.JButton attributeSuccessRate;
    private javax.swing.JButton clearArticleProperties;
    private javax.swing.JTextField filePathTextBox;
    private javax.swing.JButton findAuthor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton listAllArticles;
    private javax.swing.JButton listArticles;
    private javax.swing.JButton removeArticle;
    private javax.swing.JButton selectArticle;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
   
    private String[][] objectListToStringStringArray(List<Article> list){
        String[][] veri = new String[list.size()][3];         
        for(int i=0; i<list.size(); i++){
            veri[i][0] = list.get(i).getAuthor();
            veri[i][1] = list.get(i).getContent();
            veri[i][2] = list.get(i).getType().getName();
        }
        
        return veri;
    }
    
    private String[] listToStringArray(List<String> list){
        String[] baslik = new String[3];
        for(int i=0; i< list.size(); i++){
            baslik[i] = list.get(i);
        }
        
        return baslik;
    }
    
    private boolean check(Article article) {
        if(this.articleAuthorListGUI.getSelectedRow().equals("Select...") && 
            this.articleTypeListGUI.getSelectedRow().equals("Select...")){
            return true;
        }else if(this.articleAuthorListGUI.getSelectedRow().equals("Select...")){
            return article.getType().getName().equals(this.articleTypeListGUI.getSelectedRow());
        }else if(this.articleTypeListGUI.getSelectedRow().equals("Select...")){
            return article.getAuthor().equals(this.articleAuthorListGUI.getSelectedRow());
        }else{
            return article.getType().getName().equals(this.articleTypeListGUI.getSelectedRow()) &&
                   article.getAuthor().equals(this.articleAuthorListGUI.getSelectedRow()); 
        }       
    }
}
