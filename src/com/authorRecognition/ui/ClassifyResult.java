package com.authorRecognition.ui;

import com.authorRecognition.db.DatabaseOperation;
import com.authorRecognition.ui.swing.ComboBoxGUI;
import com.authorRecognition.ui.swing.MessageBox;
import com.authorRecognition.weka.Arff;
import com.authorRecognition.weka.ArticleProperty;
import com.authorRecognition.weka.Attribute;
import com.authorRecognition.weka.Classifier;
import com.authorRecognition.weka.Data;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class ClassifyResult extends javax.swing.JFrame {
    
    private List<ArticleProperty> articleProperties;
    private ComboBoxGUI classifyMethodGUI = null;
    private String filePath = "AuthorRecognition.arff";
    private List<String> classValuesL = new ArrayList<>();    
    
    public ClassifyResult() {
        initComponents();
        
        classifyMethodGUI = new ComboBoxGUI(this.classifyMethod);
        
        DatabaseOperation db = new DatabaseOperation();
        try {
            db.connect();

            //Makalele özelliklerini veritabanından oku
            articleProperties = db.getAllArticleProperties();
            db.disconnect();
        } catch (Exception ex) {
            MessageBox.warningMessage("", "Article Properties not found!!!");
        }

        String relationName = "AuthorRecognition";

        //Arff dosyası atribute listesini hazırla
        List<Attribute> attributeList = new ArrayList<>();
        for (int i = 0; i < articleProperties.get(0).getProperties().size(); i++) {
            List<String> values = new ArrayList<>();
            values.add("REAL");
            Attribute a = new Attribute(articleProperties.get(0).getProperty(i), values);
            attributeList.add(a);
        }

        //Arff dosyası class value hazırla
        Set<String> classValues = new HashSet<>();
        for (int i = 0; i < articleProperties.size(); i++) {
            classValues.add(articleProperties.get(i).getAuthor().replace(' ', '-'));
        }
        
        Iterator it = classValues.iterator();
        while (it.hasNext()) {
            classValuesL.add((String) it.next());
        }

        //Attribute listesine class value ekle
        Attribute a = new Attribute("AUTHOR", classValuesL);
        attributeList.add(a);

        //Arff dosyası datalist'i hazırla
        List<Data> dataList = new ArrayList<>();
        int listSize = articleProperties.size();
        int propertySize = articleProperties.get(0).getProperties().size();
        for (int i = 0; i < listSize; i++) {
            List<String> values = new ArrayList<>();
            for (int j = 0; j < propertySize; j++) {
                values.add(String.valueOf(articleProperties.get(i).getValue(j)));
            }
            Data d = new Data(articleProperties.get(i).getAuthor().replace(' ', '-'), values);
            dataList.add(d);
        }

        //Arff dosyasına verileri kaydet
        Arff.writeToArffFile(filePath, relationName, attributeList, dataList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ArtcieText = new javax.swing.JTextArea();
        classifyMethod = new javax.swing.JComboBox();
        calculate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Classify Result");

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        ArtcieText.setEditable(false);
        ArtcieText.setColumns(20);
        ArtcieText.setRows(5);
        jScrollPane1.setViewportView(ArtcieText);

        classifyMethod.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        classifyMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Naive Bayes", "Bayes Network", "Support Vector Machine", "Simple Logistic", "LMT" }));

        calculate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        calculate.setForeground(new java.awt.Color(0, 153, 255));
        calculate.setIcon(new javax.swing.ImageIcon("C:\\Users\\erdem_000\\Google Drive\\Buton Resimler\\start\\run-icon.png")); // NOI18N
        calculate.setText("Calculate");
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classifyMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classifyMethod)
                    .addComponent(calculate, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        String result = Classifier.classify(classValuesL.size(), filePath, this.classifyMethodGUI.getSelectedRow());
        this.ArtcieText.setText(result);
    }//GEN-LAST:event_calculateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassifyResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassifyResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassifyResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassifyResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassifyResult().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ArtcieText;
    private javax.swing.JButton calculate;
    private javax.swing.JComboBox classifyMethod;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
